name: Build and Deploy to MicroK8s

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

env:
  DOCKER_USERNAME: lokesh86186
  IMAGE_NAME: react
  KUBE_SERVER: 45.129.86.68

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # 1Ô∏è‚É£ Checkout repo
    - name: Checkout code
      uses: actions/checkout@v4

    # 2Ô∏è‚É£ Log in to Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # 3Ô∏è‚É£ Build and push Docker image with commit ID
    - name: Build and push Docker image
      run: |
        COMMIT_ID=$(echo ${{ github.sha }} | cut -c1-7)
        IMAGE_TAG=${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:$COMMIT_ID
        echo "üõ† Building and pushing image: $IMAGE_TAG"
        docker build -t $IMAGE_TAG .
        docker push $IMAGE_TAG
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

    # 4Ô∏è‚É£ Setup SSH key
    - name: Setup SSH key
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    # 5Ô∏è‚É£ Add server to known hosts
    - name: Add server to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ env.KUBE_SERVER }} >> ~/.ssh/known_hosts

    # 6Ô∏è‚É£ Deploy to MicroK8s (auto-detect YAMLs)
    - name: Deploy to MicroK8s
      run: |
        # Detect YAML files dynamically
        DEPLOY_FILES=$(ls *.yaml *.yml 2>/dev/null | tr '\n' ' ')
        echo "üß© Found YAML files: $DEPLOY_FILES"

        # Update image reference in any deployment file
        for file in $DEPLOY_FILES; do
          if grep -q "kind: Deployment" "$file"; then
            echo "üîÅ Updating image tag in $file"
            sed -i "s|image:.*|image: ${{ env.IMAGE_TAG }}|g" "$file"
          fi
        done

        # Copy YAMLs to server
        scp -o StrictHostKeyChecking=no $DEPLOY_FILES ubuntu@${{ env.KUBE_SERVER }}:/tmp/

        # Execute deployment & mobile app build on server
        ssh -o StrictHostKeyChecking=no ubuntu@${{ env.KUBE_SERVER }} << 'EOF'
          set -e
          echo "üîê Creating Docker pull secret..."
          microk8s kubectl delete secret regcred --ignore-not-found
          microk8s kubectl create secret docker-registry regcred \
            --docker-username=${DOCKER_USERNAME} \
            --docker-password=${DOCKER_PASSWORD} \
            --docker-server=https://index.docker.io/v1/

          echo "üöÄ Applying all YAML manifests..."
          for f in /tmp/*.yaml; do
            echo "Applying \$f"
            microk8s kubectl apply -f \$f
          done

          echo "‚è≥ Waiting for all deployments to roll out..."
          DEPLOYMENTS=\$(microk8s kubectl get deploy -o name)
          for d in \$DEPLOYMENTS; do
            echo "Rolling out: \$d"
            microk8s kubectl rollout status \$d --timeout=300s || true
          done

          echo "‚úÖ Listing resources..."
          microk8s kubectl get pods -o wide
          microk8s kubectl get svc

          echo "üß© Building mobile app..."
          cd /home/ubuntu/mobile-app   # Ensure this path exists
          npm install
          npm run build
          tar -czf /tmp/mobile-app-${GITHUB_SHA}.tar.gz build/
        EOF

        # Download mobile app to GitHub runner
        scp -o StrictHostKeyChecking=no ubuntu@${{ env.KUBE_SERVER }}:/tmp/mobile-app-${{ github.sha }}.tar.gz ./mobile-app.tar.gz

    # 7Ô∏è‚É£ Upload built app as artifact
    - name: Upload mobile app artifact
      uses: actions/upload-artifact@v4
      with:
        name: mobile-app
        path: ./mobile-app.tar.gz

    # 8Ô∏è‚É£ Summary
    - name: Deployment Summary
      run: |
        echo "üöÄ Deployment completed successfully!"
        echo "üì¶ Image: ${{ env.IMAGE_TAG }}"
        echo "üéØ Server: ${{ env.KUBE_SERVER }}"
