name: Build, Deploy Android APK & MicroK8s

on:
  push:
    branches: [main, master]
  workflow_dispatch:

env:
  DOCKER_USERNAME: lokesh86186
  IMAGE_NAME: expense-app
  KUBE_SERVER: 45.129.86.68
  DEPLOYMENT_FILE: deployment.yaml
  SERVICE_FILE: service.yaml
  SECRET_FILE: kube-secret.yaml
  APP_LABEL: expense-app
  DEPLOYMENT_NAME: expense-app-deployment
  ANDROID_HOME: /usr/local/lib/android/sdk
  ANDROID_SDK_ROOT: /usr/local/lib/android/sdk

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # 1Ô∏è‚É£ Checkout code
    - name: Checkout code
      uses: actions/checkout@v4

    # 2Ô∏è‚É£ Set up Node.js
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    # 3Ô∏è‚É£ Install dependencies
    - name: Install dependencies
      run: yarn install

    # 4Ô∏è‚É£ Prepare Capacitor Android
    - name: Capacitor sync
      run: |
        # Ensure gradlew is executable
        chmod +x android/gradlew

        # Sync Capacitor without Cordova (since your app doesn't use Cordova)
        npx cap sync android

    # 5Ô∏è‚É£ Build APK
    - name: Build APK
      run: |
        cd android
        ./gradlew clean assembleRelease --no-daemon --warning-mode all
        cd ..
        # Set APK path as env variable
        echo "APK_PATH=$(find android/app/build/outputs/apk/release -name '*.apk' | head -n 1)" >> $GITHUB_ENV

    # 6Ô∏è‚É£ Upload APK artifact
    - name: Upload APK
      uses: actions/upload-artifact@v3
      with:
        name: expense-app-apk
        path: ${{ env.APK_PATH }}

    # 7Ô∏è‚É£ Login to Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # 8Ô∏è‚É£ Build and push Docker image with commit SHA
    - name: Build and push Docker image
      run: |
        IMAGE_TAG=${GITHUB_SHA::7}
        docker build -t ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG .
        docker push ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG

    # 9Ô∏è‚É£ Setup SSH key for deployment
    - name: Setup SSH key
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    # üîü Add server to known hosts
    - name: Add server to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ env.KUBE_SERVER }} >> ~/.ssh/known_hosts

    # 1Ô∏è‚É£1Ô∏è‚É£ Deploy to MicroK8s
    - name: Deploy to MicroK8s
      run: |
        # Replace image in deployment YAML with new commit-tagged image
        sed -i "s|image:.*|image: ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${GITHUB_SHA::7}|g" ${{ env.DEPLOYMENT_FILE }}

        # Copy YAMLs to server
        scp -o StrictHostKeyChecking=no ${{ env.SECRET_FILE }} ${{ env.DEPLOYMENT_FILE }} ${{ env.SERVICE_FILE }} ubuntu@${{ env.KUBE_SERVER }}:/tmp/

        # Apply resources
        ssh -o StrictHostKeyChecking=no ubuntu@${{ env.KUBE_SERVER }} << 'EOF'
          echo "Applying Kubernetes manifests..."
          microk8s kubectl apply -f /tmp/kube-secret.yaml
          microk8s kubectl apply -f /tmp/deployment.yaml
          microk8s kubectl apply -f /tmp/service.yaml

          echo "Waiting for deployment rollout..."
          microk8s kubectl rollout status deployment/expense-app-deployment --timeout=300s

          echo "Listing pods and services..."
          microk8s kubectl get pods -l app=expense-app
          microk8s kubectl get svc expense-app-service

          echo "Cleaning up temporary files..."
          rm -f /tmp/kube-secret.yaml /tmp/deployment.yaml /tmp/service.yaml
        EOF

    # 1Ô∏è‚É£2Ô∏è‚É£ Deployment summary
    - name: Deployment Summary
      run: |
        echo "üöÄ Deployment completed successfully!"
        echo "üì¶ APK path: ${{ env.APK_PATH }}"
        echo "üì¶ Docker image: ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${GITHUB_SHA::7}"
        echo "üéØ MicroK8s server: ${{ env.KUBE_SERVER }}"
