name: Build APK & Deploy to MicroK8s

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

env:
  DOCKER_USERNAME: lokesh86186
  IMAGE_NAME: react
  KUBE_SERVER: 45.129.86.68
  DEPLOYMENT_FILE: app-deployment.yaml
  SERVICE_FILE: app-service.yaml
  SECRET_FILE: kube-secret.yaml
  APP_LABEL: react-app
  DEPLOYMENT_NAME: react-deployment

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # 1Ô∏è‚É£ Checkout repository
    - name: Checkout repository
      uses: actions/checkout@v4

    # 2Ô∏è‚É£ Install dependencies (Node + Java + Gradle)
    - name: Setup environment for APK build
      run: |
        sudo apt update -y
        sudo apt install -y openjdk-17-jdk gradle
        npm install -g yarn
        yarn install

    # 3Ô∏è‚É£ Build Android APK
    - name: Build Android APK
      run: |
        cd android
        chmod +x gradlew
        ./gradlew assembleRelease
        cd ..
        echo "APK_PATH=$(find android/app/build/outputs/apk/release -name '*.apk' | head -n 1)" >> $GITHUB_ENV

    # 4Ô∏è‚É£ Upload APK as GitHub Artifact (for direct download)
    - name: Upload APK to GitHub Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: ${{ env.APK_PATH }}

    # 5Ô∏è‚É£ Login to Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # 6Ô∏è‚É£ Build and push Docker image (tagged by commit ID)
    - name: Build & Push Docker image
      run: |
        COMMIT_ID=$(echo $GITHUB_SHA | cut -c1-7)
        IMAGE_TAG=${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:$COMMIT_ID
        docker build -t $IMAGE_TAG .
        docker push $IMAGE_TAG
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

    # 7Ô∏è‚É£ Setup SSH key for remote access
    - name: Setup SSH key
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    # 8Ô∏è‚É£ Add server to known hosts
    - name: Add server to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ env.KUBE_SERVER }} >> ~/.ssh/known_hosts

    # 9Ô∏è‚É£ Copy manifests and APK to server
    - name: Copy manifests and APK to server
      run: |
        scp -o StrictHostKeyChecking=no \
          ${{ env.SECRET_FILE }} ${{ env.DEPLOYMENT_FILE }} ${{ env.SERVICE_FILE }} \
          ${{ env.APK_PATH }} \
          ubuntu@${{ env.KUBE_SERVER }}:/tmp/

    # üîü Apply manifests in MicroK8s and move APK to permanent location
    - name: Deploy to MicroK8s & Store APK
      run: |
        ssh -o StrictHostKeyChecking=no ubuntu@${{ env.KUBE_SERVER }} << 'EOF'
          echo "üöÄ Deploying to MicroK8s..."
          mkdir -p ~/apks
          mv /tmp/*.apk ~/apks/

          microk8s kubectl apply -f /tmp/${SECRET_FILE}
          microk8s kubectl apply -f /tmp/${DEPLOYMENT_FILE}
          microk8s kubectl apply -f /tmp/${SERVICE_FILE}

          microk8s kubectl rollout status deployment/${DEPLOYMENT_NAME} --timeout=300s

          echo "‚úÖ Pods:"
          microk8s kubectl get pods -l app=${APP_LABEL}
          echo "‚úÖ Services:"
          microk8s kubectl get svc

          echo "üßπ Cleaning temp files..."
          rm -f /tmp/${SECRET_FILE} /tmp/${DEPLOYMENT_FILE} /tmp/${SERVICE_FILE}
        EOF

    # 11Ô∏è‚É£ Deployment Summary
    - name: Deployment Summary
      run: |
        echo "‚úÖ Deployment complete!"
        echo "üì¶ Image: $IMAGE_TAG"
        echo "üéØ Server: ${{ env.KUBE_SERVER }}"
        echo "üì≤ APK stored at: /home/ubuntu/apks/"
        echo "‚û°Ô∏è Download using:"
        echo "scp ubuntu@${{ env.KUBE_SERVER }}:/home/ubuntu/apks/*.apk ."
