name: Build Docker Image and Deploy to Kubernetes

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_USERNAME: lokesh86186
  IMAGE_NAME: react
  KUBE_SERVER: 45.129.86.68

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=v1,enable={{is_default_branch}}
          type=raw,value=v{{sha}},prefix={{branch}}-
          type=ref,event=branch
          type=ref,event=pr

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-to-kubernetes:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Setup SSH key
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Add server to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ env.KUBE_SERVER }} >> ~/.ssh/known_hosts

    - name: Update deployment image
      run: |
        # Extract the version tag from the build step
        IMAGE_TAG=$(echo "${{ needs.build-and-push.outputs.image-tag }}" | grep -E "(v1|main-|master-)" | head -1)
        echo "Using image tag: $IMAGE_TAG"
        
        # Update the k8s-manifest.yaml with the new image
        sed -i "s|image: react:.*|image: $IMAGE_TAG|g" k8s-manifest.yaml

    - name: Deploy to Kubernetes
      run: |
        # Copy the combined manifest to server and apply
        scp -o StrictHostKeyChecking=no k8s-manifest.yaml root@${{ env.KUBE_SERVER }}:/tmp/
        
        ssh -o StrictHostKeyChecking=no root@${{ env.KUBE_SERVER }} << 'EOF'
          # Apply combined Kubernetes manifest
          kubectl apply -f /tmp/k8s-manifest.yaml
          
          # Wait for deployment to be ready
          kubectl rollout status deployment/expense-app-deployment --timeout=300s
          
          # Show deployment status
          kubectl get pods -l app=expense-app
          kubectl get services expense-app-service
          
          # Show minikube service URL
          if command -v minikube &> /dev/null; then
            echo "Minikube service URL:"
            minikube service expense-app-service --url
          fi
          
          # Cleanup temp files
          rm -f /tmp/k8s-manifest.yaml
        EOF

    - name: Deployment Summary
      run: |
        echo "ðŸš€ Deployment completed successfully!"
        echo "ðŸ“¦ Docker Image: ${{ needs.build-and-push.outputs.image-tag }}"
        echo "ðŸŽ¯ Target Server: ${{ env.KUBE_SERVER }}"
        echo "âœ… Application should be accessible via the NodePort service"
