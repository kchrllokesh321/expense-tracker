// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://dbryzupmykgbokxhhcqb.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRicnl6dXBteWtnYm9reGhoY3FiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTMzNjY1MDQsImV4cCI6MjA2ODk0MjUwNH0.oPZ4sQF6QDtckVA1Vj0QjNZItWBdyUmonqbnttpGQ0c";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
  }
});

// Returns the effective user id to use for app queries.
// Ensures consistent user identification and session management
export async function getEffectiveUserId(): Promise<string | null> {
  try {
    // Get stored user ID first
    const storedId = localStorage.getItem('userId');
    if (!storedId) return null;

    // Check current session
    const { data: { session } } = await supabase.auth.getSession();
    
    // If no session, create one
    if (!session) {
      const { data: authData, error: authError } = await supabase.auth.signInAnonymously();
      if (authError) throw authError;
    }

    // Verify profile exists
    const { data: profile, error: profileError } = await supabase
      .from('profiles')
      .select('user_id, username')
      .eq('user_id', storedId)
      .single();

    if (profileError) {
      console.error('Profile verification failed:', profileError);
      return null;
    }

    if (profile?.user_id) {
      // Ensure username is in sync
      if (profile.username) {
        localStorage.setItem('username', profile.username);
      }
      return storedId;
    }

    return null;
  } catch (e) {
    console.error('Error in getEffectiveUserId:', e);
    // Don't fall back to localStorage on error
    return null;
  }
}